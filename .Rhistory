#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
source("cachematrix.R")
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns    matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x <- matrix(rnorm(4), nrow = 2)          #Create a matrix x
cx <- makeCacheMatrix(x)                  #Create our special matrix
cx$get()                                  #Return the matrix
cacheSolve(cx)                            #Return the inverse
cacheSolve(cx)                            #Call the 2nd time, so return the cached inverse
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
##      [,1]  [,2]
## [1,]  1.00 -0.25
## [2,] -0.25  1.00
## No cache in the first run
cacheSolve(m)
##           [,1]      [,2]
## [1,] 1.0666667 0.2666667
## [2,] 0.2666667 1.0666667
## Retrieving from the cache in the second run
cacheSolve(m)
## getting cached data.
##           [,1]      [,2]
## [1,] 1.0666667 0.2666667
## [2,] 0.2666667 1.0666667
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns    matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
b <- 20
h <- function(x) { if (rbinom(1,1,0.5)) { b <- 1000 }; return(b * x); }
h(2)
h(2)
h(2)
h(2)
h(2)
h(2)
个摊位的（）
getwd()
install.packages("pryr")
pryr()
pryr
library(pryr)
pryr()
pryr
# this function works like a class, it creates a list
# that contains 4 member functions: set, get, setInv
# and getInv. it uses <<- assignment operator so that
# these internal variables are not exposed to the
# outside environment.
makeCacheMatrix <- function(x = matrix()) {
xinv <- NULL # this is where the result of inversion is stored
# A setter function, use this to set a matrix to object created by makeCacheMatrix function
# e.g makeCacheMatrix(testmatrix) # here we work on testmatrix
# makeCacheMatrix$set(testmatrix1) # here we work on testmatrix1
set <- function(y) {
x <<- y
xinv <<- NULL # it also initialises xinv to null
}
get <- function() x # return the input matrix
setInv <- function(inv) xinv <<- inv # set the inversed matrix
getInv <- function() xinv # return the inversed matrix
# return a list that contains these functions, so that we can use
# makeCacheMatrix object like these
# x <- makeCacheMatrix(testmatrix)
# x$set(newmatrix) # to change matrix
# x$get # to get the setted matrix
# x$setInv # to set the inversed matrix
# x$getInv # to get the inversed matrix
list(set = set, get = get,
setInv = setInv,
getInv = getInv)
}
cacheSolve <- function(x, ...) {
m <- x$getInv() # get the inversed matrix from object x
# it will be null if uncalculated, remember the first line "xinv <- NULL" in the previous function
if(!is.null(m)) { # if the inversion result is there
message("getting cached data")
return(m) # return the calculated inversion
}
data <- x$get() # if not, we do x$get to get the matrix object
m <- solve(data) # we solve it
x$setInv(m) # we then set it to the object
m # return the solved result
}
test <- matrix(runif(9,1,100),3,3)
testCached <- makeCacheMatrix(test)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
testInv <- cacheSolve(testCached)
test
testCached
## Sample run:
source("cachematrix.R")
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
##      [,1]  [,2]
## [1,]  1.00 -0.25
## [2,] -0.25  1.00
## No cache in the first run
cacheSolve(m)
##           [,1]      [,2]
## [1,] 1.0666667 0.2666667
## [2,] 0.2666667 1.0666667
## Retrieving from the cache in the second run
cacheSolve(m)
## getting cached data.
##           [,1]      [,2]
## [1,] 1.0666667 0.2666667
## [2,] 0.2666667 1.0666667
# Example usage:
x <- matrix(rnorm(4), nrow = 2)          #Create a matrix x
cx <- makeCacheMatrix(x)                  #Create our special matrix
cx$get()                                  #Return the matrix
cacheSolve(cx)                            #Return the inverse
cacheSolve(cx)                            #Call the 2nd time, so return the cached inverse
x = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
x$get()         # Returns original matrix
#[,1] [,2]
#[1,]    1    3
#[2,]    2    4
cacheSolve(x)   # Computes, caches, and returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
cacheSolve(x)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
#[,1] [,2]
#[1,]   -2  1.5
#[2,]    1 -0.5
x$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(x)   # Computes, caches, and returns new matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
x$get()         # Returns matrix
#[,1] [,2]
#[1,]    0   99
#[2,]    5   66
x$getinverse()  # Returns matrix inverse
#[,1] [,2]
#[1,] -0.13333333  0.2
#[2,]  0.01010101  0.0
X <- matrix(rpois(25,3), nrow = 5)
cX <- makeCacheMatrix(X)
cX$get()
cacheSolve(cX)
cacheSolve(cX)
invX <- cacheSolve(cX)
Y <- matrix(rpois(20,2), nrow = 5, ncol = 4)
cY <- makeCacheMatrix(Y)
cY$get()
cacheSolve(cY)
cacheSolve(cY)
invY <- cacheSolve(cY)
#Experiment to try if it works
#rectangular matrix rows < cols
Z <- matrix(rpois(20,1), nrow = 4, ncol = 5)
cZ <- makeCacheMatrix(Z)
cZ$get()
cacheSolve(cZ)
cacheSolve(cZ)
invZ <- cacheSolve(cZ)
#Experiment to try if it works
#rectangular matrix rows < cols
Z <- matrix(rpois(20,1), nrow = 4, ncol = 5)
cZ <- makeCacheMatrix(Z)
cZ$get()
cacheSolve(cZ)
cacheSolve(cZ)
invZ <- cacheSolve(cZ)
invX %*% X
X %*% invX
invY %*% Y
Z %*% invZ
m = matrix(c(2, 4, 3, 1), nrow=2, ncol=2)
m$get()
x = matrix(c(2, 4, 3, 1), nrow=2, ncol=2)
m = makeCacheMatrix(x)
source("cachematrix.R")
#Creating a square matrix in R
x = matrix(c(2, 4, 3, 1), nrow=2, ncol=2)
m = makeCacheMatrix(x)
m$get()
#       [,1] [,2]
# [1,]    2    3
# [2,]    4    1
#Inversing the matrix in R
solve(m)
cacheSolve(m)
source("cachematrix.R")
x = matrix(c(1,2,3,4), nrow=2, ncol=2))
m <- makeCacheMatrix(x)
source("cachematrix.R")
x <- matrix(c(1,2,3,4), nrow=2, ncol=2))
source("cachematrix.R")
x = matrix(c(1,2,3,4), nrow=2, ncol=2)
m <- makeCacheMatrix(x)
m$get()         # Returns original matrix
m$getinverse()  # Returns matrix inverse
cacheSolve(m)   # Computes, caches, and returns matrix inverse
m$getinverse()  # Returns matrix inverse
m$set(matrix(c(0,5,99,66), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(m)   # Computes, caches, and returns new matrix inverse
m$get()         # Returns matrix
m$getinverse()  # Returns matrix inverse
x$setinverse(i)
m$setinverse(i)
m$setinverse(m)
m
m$set(matrix(c(2,3,4,1), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(m)   # Computes, caches, and returns new matrix inverse
m$set(matrix(c(2,4,3,1), nrow=2, ncol=2)) # Modify existing matrix
cacheSolve(m)   # Computes, caches, and returns new matrix inverse
m$get()
setwd("~/GitHub/ProgrammingAssignment2")
source("cachematrix.R")
x = matrix(c(1,2,3,4), nrow=2, ncol=2)
m <- makeCacheMatrix(x)
m$get()         # Returns original matrix
cacheSolve(m)   # Computes, caches, and returns matrix inverse
m$getinverse()  # Returns matrix inverse
cacheSolve <- function(x, ...) {
cacheSolve(m)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
cacheSolve(m)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
