install.packages("KernSmooth")
install.packages("manipulate")
library("KernSmooth", lib.loc="~/R/win-library/3.1")
?str
l e n g t h ( ( x   < -   1 ) )
length ( ( x   < -   1 ) )
log_var <- c(TRUE, FALSE, T, F)
char_var <‐ c(letters[1:3])
length (( x <- 1 ))
source("cachematrix.R")
x = matrix(c(1,2,3,4), nrow=2, ncol=2)
m <- makeCacheMatrix(x)
setwd("~/GitHub/ProgrammingAssignment2")
source("cachematrix.R")
x = matrix(c(1,2,3,4), nrow=2, ncol=2)
m <- makeCacheMatrix(x)
m$get()         # Returns original matrix
cacheSolve(m)   # Computes, caches, and returns matrix inverse
m$getinverse()  # Returns matrix inverse
source("cachematrix.R")
x = matrix(c(1,2,3,4), nrow=2, ncol=2)
m <- makeCacheMatrix(x)
m$get()         # Returns original matrix
cacheSolve(m)   # Computes, caches, and returns matrix inverse
m$getinverse()  # Retrieve matrix inverse
cacheSolve(m)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
m$set(matrix(c(2,4,3,1), nrow=2, ncol=2)) # Modify existing matrix
m$get()
cacheSolve(m)
cacheSolve(m)
m$getinverse()  # Retrieve matrix inverse
source("cachematrix.R")
x = matrix(c(1,2,3,4), nrow=2, ncol=2)
m <- makeCacheMatrix(x)
m$get()         # Returns original matrix
cacheSolve(m)   # Computes, caches, and returns matrix inverse
m$getinverse()  # Retrieve matrix inverse
cacheSolve(m)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
m$set(matrix(c(2,4,3,1), nrow=2, ncol=2)) # Modify existing matrix
m$get()
cacheSolve(m)
m$getinverse()  # Retrieve matrix inverse
cacheSolve(m)   # Returns cached matrix inverse using previously computed matrix inverse getting cached data
